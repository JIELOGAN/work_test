#!/usr/bin/env python
# _#_ coding:utf-8 _*_

from django.contrib.auth.decorators import login_required
from django.shortcuts import render_to_response, render, redirect
from django.http import HttpResponse, StreamingHttpResponse, HttpResponseNotFound
from django import forms
from work_app.models import *
from django.contrib import auth
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status
from django.http import Http404
from django.http import HttpResponseRedirect
# from pure_pagination import Paginator, EmptyPage, PageNotAnInteger
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.shared import Pt


@login_required(login_url='/login')
@api_view(['GET', 'POST'])
def file_parse(request):
    if request.method =='GET':
        assets_info = sinorail_assets.objects.all()
## 分页
        page = request.GET.get('page', 1)
        paginator = Paginator(assets_info, 5)
        try:
            assets_page = paginator.page(page)
        except PageNotAnInteger:
            assets_page = paginator.page(1)
        except EmptyPage:
            assets_page = paginator.page(paginator.num_pages)

        context = {'assets_info': assets_info, 'assets_page': assets_page}
        return render(request, 'logfile/file_parse.html', context)

    elif request.method == 'POST':
        data = request.data.get('data')
        try:
            hardware_data = hardware_info.objects.filter(sn=data).values('sn','slot_status','power_state','fan_state','device_temperature','card_UsingPercent','vender_name','cpu_usage','memory_usage')
            assets_length = len(sinorail_assets.objects.all())
            assets_data = sinorail_assets.objects.all().values()

            report = Document()  # 创建空白文档
            head1 = report.add_heading('巡检报告', 0)
            head1.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER  # 居中
            paragraph1 = report.add_paragraph('站点：')

            paragraph1.add_run('11111')
            report.add_heading('1.硬件清单', 3)
            report.add_heading('网络设备:', 6)

            # 创建表
            device_table = report.add_table(assets_length + 1, 8, style='Table Grid')
            report.add_page_break()
            report.add_heading('参数说明:', 6)
            unusual_table = report.add_table(len(hardware_data[0]) + 1, 2, style='Table Grid')

            # 获取表头
            heading_cells = device_table.rows[0].cells
            keys = assets_data[0].keys()
            keys = list(keys)
            for r in range(len(keys)):
                heading_cells[r].text = keys[r]

            unusual_table_heading_cells = unusual_table.rows[0].cells
            unusual_table_heading_cells[0].text = '参数名'
            unusual_table_heading_cells[1].text = '参数说明'

            # 获取表值
            for i in range(assets_length):
                values = list(assets_data[i].values())
                for r in range(len(keys)):
                    device_table.cell(i + 1, r).text = str(values[r])

            # 填入状态说明
            temp_data = list(hardware_data[0].items())
            for i in range(len(temp_data)):
                unusual_table.cell(i + 1, 0).text = str(temp_data[i][0])
                unusual_table.cell(i + 1, 1).text = str(temp_data[i][1])

            # 列宽
            for r in range(8):
                device_table.autofit = False
                width = float(len(heading_cells[r].text)) / 5
                print(width)
                print(Inches(width))
                device_table.columns[r].width = Inches(width)
            # 字体
            for row in device_table.rows:
                for cell in row.cells:
                    pargraphs = cell.paragraphs
                    for pargraph in pargraphs:
                        for run in pargraph.runs:
                            font = run.font
                            font.size = Pt(6)

            report.save(data+'sinorail_report.docx')

        except IOError:
            print('没有该设备的日志文件')
            return HttpResponseNotFound('<h1>该设备没有日志文件</h1>')
        return render(request, 'logfile/file_parse.html', {})
    else:
        return render(request, 'logfile/file_parse.html', {})
